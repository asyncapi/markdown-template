// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AsyncAPI component should render AsyncAPI v2 document 1`] = `
"# Streetlights API 1.0.0 documentation

* License: [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)
* Default content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

The Smartylighting Streetlights API allows you to remotely manage the city lights.

### Check out its awesome features:

* Turn a specific streetlight on/off ðŸŒƒ
* Dim a specific streetlight ðŸ˜Ž
* Receive real-time information about environmental lighting conditions ðŸ“ˆ


## Table of Contents

* [Servers](#servers)
  * [production](#production-server)
* [Operations](#operations)
  * [PUB smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured](#pub-smartylightingstreetlights10eventstreetlightidlightingmeasured-operation)
  * [SUB smartylighting/streetlights/1/0/action/{streetlightId}/turn/on](#sub-smartylightingstreetlights10actionstreetlightidturnon-operation)
  * [SUB smartylighting/streetlights/1/0/action/{streetlightId}/turn/off](#sub-smartylightingstreetlights10actionstreetlightidturnoff-operation)
  * [SUB smartylighting/streetlights/1/0/action/{streetlightId}/dim](#sub-smartylightingstreetlights10actionstreetlightiddim-operation)
  * [SUB some.channel](#sub-somechannel-operation)

## Servers

### \`production\` Server

* URL: \`mqtt://test.mosquitto.org:{port}\`
* Protocol: \`mqtt\`

Test broker

#### URL Variables

| Name | Description | Default value | Allowed values |
|---|---|---|---|
| port | Secure connection (TLS) is available through port 8883. | \`1883\` | \`1883\`, \`8883\` |


## Operations

### PUB \`smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured\` Operation

*Inform about environmental lighting conditions of a particular streetlight.*

* Operation ID: \`receiveLightMeasurement\`

The topic on which measured values may be produced and consumed.

This is the description with **bold** text.

On multiple lines.


##### Operation tags

| Name | Description | Documentation |
|---|---|---|
| oparation-tag1 | - | [External docs description 1](https://www.asyncapi.com/) |
| oparation-tag2 | Description 2 | [Find more info here](https://www.asyncapi.com/) |
| oparation-tag3 | - | - |
| oparation-tag4 | Description 4 | - |
| message-tag5 | - | [Find more info here](https://www.asyncapi.com/) |

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| streetlightId | string | The ID of the streetlight. | - | - | **required** |


#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| clientId | - | - | \`\\"my-app-id\\"\` | - | - |

#### Message Light measured \`lightMeasured\`

*Inform about environmental lighting conditions of a particular streetlight.*

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| my-app-header | integer | - | - | [ 0 .. 100 ] | - |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"my-app-header\\": 100
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| lumens | integer | Light intensity measured in lumens. | - | >= 0 | - |
| lumens.x-pi | - | - | \`\\"false\\"\` | - | - |
| sentAt | string | Date and time when the message was sent. | - | format (\`date-time\`) | - |

> Examples of payload _(generated)_

\`\`\`json
{
  \\"lumens\\": 0,
  \\"sentAt\\": \\"2019-08-24T14:15:22Z\\"
}
\`\`\`


##### Message tags

| Name | Description | Documentation |
|---|---|---|
| message-tag1 | - | [External docs description 1](https://www.asyncapi.com/) |
| message-tag2 | Description 2 | [Find more info here](https://www.asyncapi.com/) |
| message-tag3 | - | - |
| message-tag4 | Description 4 | - |
| message-tag5 | - | [Find more info here](https://www.asyncapi.com/) |


### SUB \`smartylighting/streetlights/1/0/action/{streetlightId}/turn/on\` Operation

* Operation ID: \`turnOn\`

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| streetlightId | string | The ID of the streetlight. | - | - | **required** |


#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| clientId | - | - | \`\\"my-app-id\\"\` | - | - |

#### Message Turn on/off \`turnOnOff\`

*Command a particular streetlight to turn the lights on or off.*

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| my-app-header | integer | - | - | [ 0 .. 100 ] | - |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"my-app-header\\": 100
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| command | string | Whether to turn on or off the light. | allowed (\`\\"on\\"\`, \`\\"off\\"\`) | - | - |
| command.x-pi | - | - | \`\\"false\\"\` | - | - |
| sentAt | string | Date and time when the message was sent. | - | format (\`date-time\`) | - |

> Examples of payload _(generated)_

\`\`\`json
{
  \\"command\\": \\"on\\",
  \\"sentAt\\": \\"2019-08-24T14:15:22Z\\"
}
\`\`\`



### SUB \`smartylighting/streetlights/1/0/action/{streetlightId}/turn/off\` Operation

* Operation ID: \`turnOff\`

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| streetlightId | string | The ID of the streetlight. | - | - | **required** |


#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| clientId | - | - | \`\\"my-app-id\\"\` | - | - |

#### Message Turn on/off \`turnOnOff\`

*Command a particular streetlight to turn the lights on or off.*

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| my-app-header | integer | - | - | [ 0 .. 100 ] | - |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"my-app-header\\": 100
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| command | string | Whether to turn on or off the light. | allowed (\`\\"on\\"\`, \`\\"off\\"\`) | - | - |
| command.x-pi | - | - | \`\\"false\\"\` | - | - |
| sentAt | string | Date and time when the message was sent. | - | format (\`date-time\`) | - |

> Examples of payload _(generated)_

\`\`\`json
{
  \\"command\\": \\"on\\",
  \\"sentAt\\": \\"2019-08-24T14:15:22Z\\"
}
\`\`\`



### SUB \`smartylighting/streetlights/1/0/action/{streetlightId}/dim\` Operation

* Operation ID: \`dimLight\`

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| streetlightId | string | The ID of the streetlight. | - | - | **required** |


#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| clientId | - | - | \`\\"my-app-id\\"\` | - | - |

#### Message Dim light \`dimLight\`

*Command a particular streetlight to dim the lights.*

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| my-app-header | integer | - | - | [ 0 .. 100 ] | - |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"my-app-header\\": 100
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| percentage | integer | Percentage to which the light should be dimmed to. | - | [ 0 .. 100 ] | - |
| sentAt | string | Date and time when the message was sent. | - | format (\`date-time\`) | - |

> Examples of payload _(generated)_

\`\`\`json
{
  \\"percentage\\": 100,
  \\"sentAt\\": \\"2019-08-24T14:15:22Z\\"
}
\`\`\`



### SUB \`some.channel\` Operation

this description shows in markdown

Accepts **one of** the following messages:

#### Message \`Success\`

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| result | string | - | examples (\`\\"success\\"\`) | - | - |

> Examples of payload _(generated)_

\`\`\`json
{
  \\"result\\": \\"success\\"
}
\`\`\`


#### Message \`Failure\`

* Content type: [application/json](https://www.iana.org/assignments/media-types/application/json)

##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | examples (\`{\\"error\\":{\\"errorCode\\":404,\\"errorMessage\\":\\"Something messed up\\"}}\`) | - | **additional properties are allowed** |
| error | object | - | - | - | **additional properties are allowed** |
| error.errorCode | integer | - | - | - | - |
| error.errorMessage | string | - | - | - | - |

> Examples of payload

\`\`\`json
{
  \\"error\\": {
    \\"errorCode\\": 404,
    \\"errorMessage\\": \\"Something messed up\\"
  }
}
\`\`\`"
`;

exports[`AsyncAPI component should render AsyncAPI v3 document 1`] = `
"# Adeo AsyncAPI Case Study %REPLACED_BY_MAVEN% documentation

* Email support: [info@asyncapi.io](mailto:info@asyncapi.io)

This Adeo specification illustrates how ADEO uses AsyncAPI to document some of their exchanges

##### Specification tags

| Name | Description | Documentation |
|---|---|---|
| costing | Costing channels, used by Costing clients. | - |


## Table of Contents

* [Servers](#servers)
  * [production](#production-server)
  * [staging](#staging-server)
  * [dev](#dev-server)

## Servers

### \`production\` Server

* URL: \`kafka-secure://prod.url:9092/\`
* Protocol: \`kafka-secure\`

Kafka PRODUCTION cluster

#### Security

##### Security Requirement 1

* Type: \`PLAIN\`
  * security.protocol: SASL_SSL
  * sasl.mechanism: PLAIN

  Use [SASL authentication with SSL encryption](https://docs.confluent.io/platform/current/security/security_tutorial.html#configure-clients) to connect to the ADEO Broker.






#### \`kafka\` Server specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| schemaRegistryUrl | - | - | \`\\"https://schema-registry.prod.url/\\"\` | - | - |


### \`staging\` Server

* URL: \`kafka-secure://staging.url:9092/\`
* Protocol: \`kafka-secure\`

Kafka STAGING cluster for \`uat\` and \`preprod\` environments

#### Security

##### Security Requirement 1

* Type: \`PLAIN\`
  * security.protocol: SASL_SSL
  * sasl.mechanism: PLAIN

  Use [SASL authentication with SSL encryption](https://docs.confluent.io/platform/current/security/security_tutorial.html#configure-clients) to connect to the ADEO Broker.






#### \`kafka\` Server specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| schemaRegistryUrl | - | - | \`\\"https://schema-registry.staging.url/\\"\` | - | - |


### \`dev\` Server

* URL: \`kafka-secure://dev.url:9092/\`
* Protocol: \`kafka-secure\`

Kafka DEV cluster for \`dev\` and \`sit\` environments

#### Security

##### Security Requirement 1

* Type: \`PLAIN\`
  * security.protocol: SASL_SSL
  * sasl.mechanism: PLAIN

  Use [SASL authentication with SSL encryption](https://docs.confluent.io/platform/current/security/security_tutorial.html#configure-clients) to connect to the ADEO Broker.






#### \`kafka\` Server specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| schemaRegistryUrl | - | - | \`\\"https://schema-registry.dev.url/\\"\` | - | - |


## Operations

### REPLY \`adeo-{env}-case-study-COSTING-REQUEST-{version}\` Operation

*[COSTING] Request one or more Costing calculation for any product*

* Operation ID: \`requestCosting\`

Use this topic to do a Costing Request to Costing product. We use the [**RecordNameStrategy**](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#subject-name-strategy) to infer the messages schema. You have to define \`x-value.subject.name.strategy\` to \`io.confluent.kafka.serializers.subject.RecordNameStrategy\` in your producer to use the schema we manage. The schema below illustrates how Costing Request messages are handled. ![](https://user-images.githubusercontent.com/5501911/188920831-689cec5f-8dc3-460b-8794-0b54ec8b0ac8.png)


You can try a costing request using our [Conduktor producer template](https://conduktor.url)


##### Operation tags

| Name | Description | Documentation |
|---|---|---|
| costing | - | - |

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| env | string | Adeo Kafka Environment for messages publications. | allowed (\`\\"dev\\"\`, \`\\"sit\\"\`, \`\\"uat1\\"\`, \`\\"preprod\\"\`, \`\\"prod\\"\`) | - | **required** |
| version | string | the topic version you want to use | default (\`\\"V1\\"\`), examples (\`\\"V1\\"\`) | - | **required** |


#### \`kafka\` Channel specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| replicas | - | - | \`\\"3\\"\` | - | - |
| partitions | - | - | \`\\"3\\"\` | - | - |
| topicConfiguration | - | - | - | - | - |
| topicConfiguration.cleanup.policy | - | - | - | - | - |
| topicConfiguration.cleanup.policy.0 (index) | - | - | \`\\"delete\\"\` | - | - |
| topicConfiguration.retention.ms | - | - | \`\\"604800000\\"\` | - | - |

#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| groupId | string | The groupId must be prefixed by your \`svc\` account, deliver by the Adeo Kafka team. This \`svc\` must have the write access to the topic. | - | - | - |
| x-value.subject.name.strategy | string | We use the RecordNameStrategy to infer the messages schema. Use \`x-value.subject.name.strategy=io.confluent.kafka.serializers.subject.RecordNameStrategy\` in your producer configuration. | - | - | - |

#### Message Costing Request V1 \`CostingRequestV1\`

*Costing Request V1 inputs.*

##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| REQUEST_ID | string | A unique Request ID needed to define a \`CORRELATION_ID\` for exchanges, which will be sent back in the Costing Responses. | - | format (\`uuid\`) | **required** |
| REPLY_TOPIC | string | The Kafka topic where to send the Costing Response. This is required for the [Return Address EIP pattern](https://www.enterpriseintegrationpatterns.com/patterns/messaging/ReturnAddress.html). **You must grant WRITE access to our \`svc-ccr-app\` service account.** | - | - | **required** |
| REQUESTER_ID | string | The Costing requester service account used to produce costing request. | - | - | **required** |
| REQUESTER_CODE | string | The Costing requester code (generally the BU Code). The requester code is useful to get the dedicated context (tenant). | - | - | **required** |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"REQUEST_ID\\": \\"1fa6ef40-8f47-40a8-8cf6-f8607d0066ef\\",
  \\"REPLY_TOPIC\\": \\"adeo-case-study-COSTING-RESPONSE-V1\\",
  \\"REQUESTER_ID\\": \\"svc-ecollect-app\\",
  \\"REQUESTER_CODE\\": 1
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | record | - | - | - | - |

> Examples of payload _(generated)_

\`\`\`json
\\"\\"
\`\`\`


##### Message tags

| Name | Description | Documentation |
|---|---|---|
| costing | - | - |

#### Response information

*  should be done to channel: \`adeo-{env}-case-study-COSTING-RESPONSE-{version}\`
#### Operation reply address information

* Operation reply address location: \`$message.header#/REPLY_TOPIC\`



### SEND \`adeo-{env}-case-study-COSTING-RESPONSE-{version}\` Operation

*[COSTING] Get the costing responses matching an initial Costing Request.*

* Operation ID: \`getCostingResponse\`

This topic is used to REPLY Costing Requests and is targeted by the \`REPLY_TOPIC\` header. **You must grant PUBLISH access to our \`svc-ccr-app\` service account.**. We use the [**RecordNameStrategy**](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#subject-name-strategy) to infer the messages schema. You have to define \`key.subject.name.strategy\` and \`x-value.subject.name.strategy\` to \`io.confluent.kafka.serializers.subject.RecordNameStrategy\` in your consumer. The schema below illustrates how Costing Response messages are handled.
     ![](https://user-images.githubusercontent.com/5501911/188920831-689cec5f-8dc3-460b-8794-0b54ec8b0ac8.png)


##### Operation tags

| Name | Description | Documentation |
|---|---|---|
| costing | - | - |

#### Parameters

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| env | string | Adeo Kafka Environment for messages publications. | allowed (\`\\"dev\\"\`, \`\\"sit\\"\`, \`\\"uat1\\"\`, \`\\"preprod\\"\`, \`\\"prod\\"\`) | - | **required** |
| version | string | the topic version you want to use | default (\`\\"V1\\"\`), examples (\`\\"V1\\"\`) | - | **required** |


#### \`kafka\` Channel specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| x-key.subject.name.strategy | string | We use the RecordNameStrategy to infer the messages schema. Use \`x-key.subject.name.strategy=io.confluent.kafka.serializers.subject.RecordNameStrategy\` in your consumer configuration. | - | - | - |
| x-value.subject.name.strategy | string | We use the RecordNameStrategy to infer the messages schema. Use \`x-value.subject.name.strategy=io.confluent.kafka.serializers.subject.RecordNameStrategy\` in your consumer configuration. | - | - | - |

#### \`kafka\` Operation specific information

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| groupId | string | The groupId must be prefixed by your \`svc\` account, deliver by the Adeo Kafka team. This \`svc\` must have the read access to the topic. | - | - | - |

#### Message Costing Response \`CostingResponse\`

*Costing Response ouputs.*

Please refer to the \`CostingResponseKey.avsc\` schema, available on [our github project](https://github.url/).


##### Headers

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | object | - | - | - | **additional properties are allowed** |
| CALCULATION_ID | string | A unique Message ID. | - | format (\`uuid\`) | - |
| CORRELATION_ID | string | A unique Correlation ID defined from the \`REQUEST_ID\` or the \`MESSAGE_ID\` provided in the Costing Request. | - | format (\`uuid\`) | - |
| REQUEST_TIMESTAMP | string | Timestamp of the costing request | - | format (\`date-time\`) | - |
| CALCULATION_TIMESTAMP | string | Technical timestamp for the costing calculation | - | format (\`date-time\`) | - |

> Examples of headers _(generated)_

\`\`\`json
{
  \\"CALCULATION_ID\\": \\"1fa6ef40-8f47-40a8-8cf6-f8607d0066ef\\",
  \\"CORRELATION_ID\\": \\"1fa6ef40-8f47-40a8-8cf6-f8607d0066ef\\",
  \\"REQUEST_TIMESTAMP\\": \\"2019-08-24T14:15:22Z\\",
  \\"CALCULATION_TIMESTAMP\\": \\"2019-08-24T14:15:22Z\\"
}
\`\`\`


##### Payload

| Name | Type | Description | Value | Constraints | Notes |
|---|---|---|---|---|---|
| (root) | record | - | - | - | - |

> Examples of payload _(generated)_

\`\`\`json
\\"\\"
\`\`\`


##### Message tags

| Name | Description | Documentation |
|---|---|---|
| costing | - | - |"
`;
